{
	"name": "DF_Fact And Dim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_jsonToDb",
						"type": "LinkedServiceReference"
					},
					"name": "FactExpense",
					"description": "Deriving the Fact Table"
				},
				{
					"linkedService": {
						"referenceName": "LS_jsonToDb",
						"type": "LinkedServiceReference"
					},
					"name": "UserSourceTable",
					"description": "User Table"
				},
				{
					"linkedService": {
						"referenceName": "LS_jsonToDb",
						"type": "LinkedServiceReference"
					},
					"name": "ExpenseTable",
					"description": "Creating fact table"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_jsonToDb",
						"type": "LinkedServiceReference"
					},
					"name": "UserDimTable",
					"description": "storing the user dim table in db"
				},
				{
					"linkedService": {
						"referenceName": "LS_jsonToDb",
						"type": "LinkedServiceReference"
					},
					"name": "CategoryDim",
					"description": "creating the category dimension table"
				},
				{
					"linkedService": {
						"referenceName": "LS_jsonToDb",
						"type": "LinkedServiceReference"
					},
					"name": "FactExpenseTable"
				}
			],
			"transformations": [
				{
					"name": "SelectingFactTableFields",
					"description": "Selecting the require fields"
				},
				{
					"name": "CreatingUserDimTable"
				},
				{
					"name": "SelectingTheRequiredFields",
					"description": "selecting the needed fields for user dim table"
				},
				{
					"name": "CalcualtingTotalAmountForEachCategory"
				},
				{
					"name": "FilteringRecordsWithNoCategory",
					"description": "Removing records with category as null"
				},
				{
					"name": "RenamingColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as string,",
				"          userId as string,",
				"          Category as string,",
				"          Date as string,",
				"          Description as string,",
				"          Price as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'expenses',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> FactExpense",
				"source(output(",
				"          id as string,",
				"          Email as string,",
				"          Password as string,",
				"          Balance as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'User',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> UserSourceTable",
				"source(output(",
				"          Id as string,",
				"          userId as string,",
				"          Category as string,",
				"          Date as string,",
				"          Description as string,",
				"          Price as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'expenses',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> ExpenseTable",
				"FactExpense select(mapColumn(",
				"          ExpenseId = Id,",
				"          userId,",
				"          Category,",
				"          Date,",
				"          Description,",
				"          Price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectingFactTableFields",
				"UserSourceTable, SelectingFactTableFields lookup(id == userId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CreatingUserDimTable",
				"CreatingUserDimTable select(mapColumn(",
				"          id,",
				"          Email,",
				"          Balance",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectingTheRequiredFields",
				"FilteringRecordsWithNoCategory aggregate(groupBy(Category),",
				"     TotalAmount = sum(Price)) ~> CalcualtingTotalAmountForEachCategory",
				"SelectingFactTableFields filter(!isNull(Category)) ~> FilteringRecordsWithNoCategory",
				"ExpenseTable select(mapColumn(",
				"          ExpenseId = Id,",
				"          userId,",
				"          Category,",
				"          Date,",
				"          Description,",
				"          Price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingColumns",
				"SelectingTheRequiredFields sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'reporting',",
				"     tableName: 'UserDim',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> UserDimTable",
				"CalcualtingTotalAmountForEachCategory sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'reporting',",
				"     tableName: 'CategoryDim',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CategoryDim",
				"RenamingColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'reporting',",
				"     tableName: 'ExpenseFact',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> FactExpenseTable"
			]
		}
	}
}