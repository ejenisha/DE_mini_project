{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-assesment-001"
		},
		"LS_MongodbAtlas_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_MongodbAtlas'"
		},
		"LS_MongodbtoJSON_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_MongodbtoJSON'"
		},
		"LS_jsonToDb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_jsonToDb'"
		},
		"LS_ScrappedData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ScrappedData'"
		},
		"LS_BlobToDb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_BlobToDb'"
		},
		"LS_MongodbAtlas_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "test"
		},
		"LS_jsonToDb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "jman-training.database.windows.net"
		},
		"LS_jsonToDb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb-jmanTraining"
		},
		"LS_jsonToDb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jenisha"
		},
		"LS_BlobToDb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "jman-training.database.windows.net"
		},
		"LS_BlobToDb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb-jmanTraining"
		},
		"LS_BlobToDb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "jenisha"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Expenses')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Moving Expense Data from MongoDb to blob",
						"description": "Importing the Json data from MongoDb",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"path": "id"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"path": "userId"
										}
									},
									{
										"source": {
											"path": "$['category']"
										},
										"sink": {
											"path": "Category"
										}
									},
									{
										"source": {
											"path": "$['date']"
										},
										"sink": {
											"path": "Date"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"path": "Description"
										}
									},
									{
										"source": {
											"path": "$['amount']['$numberInt']"
										},
										"sink": {
											"path": "Price"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MongodbAtlasExpenses",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_MongodbtoJsonExpenses",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Moving Expenses Json from Blob to SqlDb",
						"description": "moving expenses data to db",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Moving Expense Data from MongoDb to blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "Id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "userId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Category']"
										},
										"sink": {
											"name": "Category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Date']"
										},
										"sink": {
											"name": "Date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Description']"
										},
										"sink": {
											"name": "Description",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Price']"
										},
										"sink": {
											"name": "Price",
											"type": "String"
										}
									}
								],
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MongodbtoJsonExpenses",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_jsonToDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ass1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_MongodbAtlasExpenses')]",
				"[concat(variables('factoryId'), '/datasets/DS_MongodbtoJsonExpenses')]",
				"[concat(variables('factoryId'), '/datasets/DS_jsonToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Reporting')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DL_Prep To Reporting",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Fact And Dim",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"FactExpense": {},
									"UserSourceTable": {},
									"ExpenseTable": {},
									"UserDimTable": {},
									"CategoryDim": {},
									"FactExpenseTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ass1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Fact And Dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Staging To Prep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move Data From Stage To Prep",
						"description": "Moving data from staging to prep layer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_DataCleaning",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Users": {},
									"Expenses": {},
									"CleanedData": {},
									"CleanedExpenseData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ass1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_DataCleaning')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Moving Users json data from MongoDb to Blob",
						"description": "storing users data in blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"path": "id"
										}
									},
									{
										"source": {
											"path": "$['email']"
										},
										"sink": {
											"path": "Email"
										}
									},
									{
										"source": {
											"path": "$['password']"
										},
										"sink": {
											"path": "Password"
										}
									},
									{
										"source": {
											"path": "$['balance']['$numberInt']"
										},
										"sink": {
											"path": "Balance"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MongoDbAtlasUsers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_MongodbToJsonUsers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Moving Users json data to Sql Db",
						"description": "storing uses data from blob to db",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Moving Users json data from MongoDb to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Email']"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Password']"
										},
										"sink": {
											"name": "Password",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Balance']"
										},
										"sink": {
											"name": "Balance",
											"type": "String"
										}
									}
								],
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MongodbToJsonUsers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_jsonToDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ass1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_MongoDbAtlasUsers')]",
				"[concat(variables('factoryId'), '/datasets/DS_MongodbToJsonUsers')]",
				"[concat(variables('factoryId'), '/datasets/DS_jsonToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_MongoDbAtlasUsers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_MongodbAtlas",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass1"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_MongodbAtlas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_MongodbAtlasExpenses')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_MongodbAtlas",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass1"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "expenses"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_MongodbAtlas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_MongodbToJsonUsers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_MongodbtoJSON",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass1"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "users",
						"container": "cr-de-miniproject"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"userId": {
							"type": "string"
						},
						"Category": {
							"type": "string"
						},
						"Date": {
							"type": "string"
						},
						"Description": {
							"type": "string"
						},
						"Price": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_MongodbtoJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_MongodbtoJsonExpenses')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_MongodbtoJSON",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass1"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Expenses",
						"container": "cr-de-miniproject"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_MongodbtoJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_jsonToDb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_jsonToDb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "category",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "expenses"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_jsonToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_MongodbAtlas')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MongoDbAtlas",
				"typeProperties": {
					"connectionString": "[parameters('LS_MongodbAtlas_connectionString')]",
					"database": "[parameters('LS_MongodbAtlas_properties_typeProperties_database')]",
					"driverVersion": "v2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_MongodbtoJSON')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_MongodbtoJSON_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_jsonToDb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_jsonToDb_properties_typeProperties_server')]",
					"database": "[parameters('LS_jsonToDb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_jsonToDb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_jsonToDb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Fact And Dim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Ass1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "FactExpense",
							"description": "Deriving the Fact Table"
						},
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "UserSourceTable",
							"description": "User Table"
						},
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "ExpenseTable",
							"description": "Creating fact table"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "UserDimTable",
							"description": "storing the user dim table in db"
						},
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "CategoryDim",
							"description": "creating the category dimension table"
						},
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "FactExpenseTable"
						}
					],
					"transformations": [
						{
							"name": "SelectingFactTableFields",
							"description": "Selecting the require fields"
						},
						{
							"name": "CreatingUserDimTable"
						},
						{
							"name": "SelectingTheRequiredFields",
							"description": "selecting the needed fields for user dim table"
						},
						{
							"name": "CalcualtingTotalAmountForEachCategory"
						},
						{
							"name": "FilteringRecordsWithNoCategory",
							"description": "Removing records with category as null"
						},
						{
							"name": "RenamingColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          userId as string,",
						"          Category as string,",
						"          Date as string,",
						"          Description as string,",
						"          Price as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'expenses',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FactExpense",
						"source(output(",
						"          id as string,",
						"          Email as string,",
						"          Password as string,",
						"          Balance as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'User',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UserSourceTable",
						"source(output(",
						"          Id as string,",
						"          userId as string,",
						"          Category as string,",
						"          Date as string,",
						"          Description as string,",
						"          Price as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'expenses',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ExpenseTable",
						"FactExpense select(mapColumn(",
						"          ExpenseId = Id,",
						"          userId,",
						"          Category,",
						"          Date,",
						"          Description,",
						"          Price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingFactTableFields",
						"UserSourceTable, SelectingFactTableFields lookup(id == userId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> CreatingUserDimTable",
						"CreatingUserDimTable select(mapColumn(",
						"          id,",
						"          Email,",
						"          Balance",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingTheRequiredFields",
						"FilteringRecordsWithNoCategory aggregate(groupBy(Category),",
						"     TotalAmount = sum(Price)) ~> CalcualtingTotalAmountForEachCategory",
						"SelectingFactTableFields filter(!isNull(Category)) ~> FilteringRecordsWithNoCategory",
						"ExpenseTable select(mapColumn(",
						"          ExpenseId = Id,",
						"          userId,",
						"          Category,",
						"          Date,",
						"          Description,",
						"          Price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenamingColumns",
						"SelectingTheRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'reporting',",
						"     tableName: 'UserDim',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> UserDimTable",
						"CalcualtingTotalAmountForEachCategory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'reporting',",
						"     tableName: 'CategoryDim',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CategoryDim",
						"RenamingColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'reporting',",
						"     tableName: 'ExpenseFact',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FactExpenseTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_jsonToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DataCleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Ass1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "Users",
							"description": "Importing Users data from db"
						},
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "Expenses",
							"description": "Importing Expenses data from db"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedData",
							"description": "LoadingCleanedUserDataIntoSqlDb"
						},
						{
							"linkedService": {
								"referenceName": "LS_jsonToDb",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedExpenseData",
							"description": "Loading the cleaned expenses into db"
						}
					],
					"transformations": [
						{
							"name": "RemovingEmptyRecords",
							"description": "Removing Users whose id and email is null"
						},
						{
							"name": "IdentifyingRedundantRows",
							"description": "Removing Duplicate Users"
						},
						{
							"name": "RemovingRedundantRows",
							"description": "Removing the Repeated Users"
						},
						{
							"name": "SelectingTheRequiredColumns",
							"description": "selecting only the needed fields"
						},
						{
							"name": "ChangingToAppropriateDataType",
							"description": "Cast columns to appropriate types"
						},
						{
							"name": "RemovingNullRecords",
							"description": "Removing Expenses which does not have user id"
						},
						{
							"name": "FindingRedundantRows",
							"description": "Removing Duplicate Expenses"
						},
						{
							"name": "RemovingDuplicateRows",
							"description": "Removing Redundant Data"
						},
						{
							"name": "SelectingNeededFields",
							"description": "Selecting Only the Required Fields"
						},
						{
							"name": "ChangingTheDataType"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          Email as string,",
						"          Password as string,",
						"          Balance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'user',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> Users",
						"source(output(",
						"          Id as string,",
						"          userId as string,",
						"          Category as string,",
						"          Date as string,",
						"          Description as string,",
						"          Price as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'expenses',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> Expenses",
						"Users filter(!isNull(id)&&!isNull(Email)&&!isNull(Password)) ~> RemovingEmptyRecords",
						"RemovingEmptyRecords window(over(id),",
						"     asc(id, true),",
						"     Rnk = rowNumber()) ~> IdentifyingRedundantRows",
						"IdentifyingRedundantRows filter(Rnk==1) ~> RemovingRedundantRows",
						"RemovingRedundantRows select(mapColumn(",
						"          id,",
						"          Email,",
						"          Password,",
						"          Balance",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingTheRequiredColumns",
						"SelectingTheRequiredColumns cast(output(",
						"          id as string,",
						"          Email as string,",
						"          Password as string,",
						"          Balance as integer",
						"     ),",
						"     errors: true) ~> ChangingToAppropriateDataType",
						"Expenses filter(!isNull(userId)) ~> RemovingNullRecords",
						"RemovingNullRecords window(over(Id),",
						"     asc(Id, true),",
						"     Rnk = rowNumber()) ~> FindingRedundantRows",
						"FindingRedundantRows filter(Rnk==1) ~> RemovingDuplicateRows",
						"RemovingDuplicateRows select(mapColumn(",
						"          Id,",
						"          userId,",
						"          Category,",
						"          Date,",
						"          Description,",
						"          Price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingNeededFields",
						"SelectingNeededFields cast(output(",
						"          Id as string,",
						"          userId as string,",
						"          Category as string,",
						"          Date as string,",
						"          Description as string,",
						"          Price as integer",
						"     ),",
						"     errors: true) ~> ChangingTheDataType",
						"ChangingToAppropriateDataType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'User',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedData",
						"ChangingTheDataType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'expenses',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedExpenseData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_jsonToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ScrappedData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_ScrappedData_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_BlobToDb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_BlobToDb_properties_typeProperties_server')]",
					"database": "[parameters('LS_BlobToDb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_BlobToDb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_BlobToDb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Main Prod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadMainProdDataIntoBlob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "components",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Components",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "categoryName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CategoryName",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "seriesName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SeriesName",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "categoryCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CategoryCode",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ScrappedData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_BlobToDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ass2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ScrappedData')]",
				"[concat(variables('factoryId'), '/datasets/DS_BlobToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ScrappedData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ScrappedData",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "prod_data2.csv",
						"container": "cr-de-miniproject"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "components",
						"type": "String"
					},
					{
						"name": "categoryName",
						"type": "String"
					},
					{
						"name": "seriesName",
						"type": "String"
					},
					{
						"name": "categoryCode",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ScrappedData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BlobToDb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobToDb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ass2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "sub_prod"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ScrappedDataCleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Ass2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "MainProdData",
							"description": "Taking the main prod data as source"
						},
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "SubProdData",
							"description": "Taking the Sub prod data as source"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedMainProdData",
							"description": "Loading Main Prod to Db"
						},
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedSubProdData",
							"description": "Loading sub prod to db"
						}
					],
					"transformations": [
						{
							"name": "RemovingDuplicateRows",
							"description": "Removing Records having same category code and name"
						},
						{
							"name": "RemovingNullRecords",
							"description": "Removing records with no category name"
						},
						{
							"name": "selectingtherequiredrows"
						},
						{
							"name": "RemovingNullRows",
							"description": "Removing records with null values"
						},
						{
							"name": "ChangingTheDataTypes"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Components as string,",
						"          CategoryName as string,",
						"          SeriesName as string,",
						"          CategoryCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'main_prod',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> MainProdData",
						"source(output(",
						"          {Department Code} as string,",
						"          {Category Code} as string,",
						"          {Category Name} as string,",
						"          {Series Code} as string,",
						"          {Series Name} as string,",
						"          {Brand Code} as string,",
						"          {Brand Name} as string,",
						"          {Min Days To Ship} as string,",
						"          {Max Days To Ship} as string,",
						"          {Min Price} as string,",
						"          {Max Price} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'staging',",
						"     tableName: 'sub_prod',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> SubProdData",
						"MainProdData aggregate(groupBy(CategoryCode = CategoryCode ,",
						"          CategoryName),",
						"     each(match(name!='CategoryCode' && name!=\"CategoryName\"), $$ = first($$))) ~> RemovingDuplicateRows",
						"RemovingDuplicateRows filter(!isNull(CategoryCode)) ~> RemovingNullRecords",
						"SubProdData select(mapColumn(",
						"          DepartmentCode = {Department Code},",
						"          CategoryCode = {Category Code},",
						"          CategoryName = {Category Name},",
						"          SeriesName = {Series Name},",
						"          BrandCode = {Brand Code},",
						"          BrandName = {Brand Name},",
						"          {MinDaysTo Ship} = {Min Days To Ship},",
						"          MaxDaysToShip = {Max Days To Ship},",
						"          MinPrice = {Min Price},",
						"          MaxPrice = {Max Price}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingtherequiredrows",
						"selectingtherequiredrows filter(!isNull(DepartmentCode)&&!isNull(CategoryCode)&&!isNull(CategoryName)) ~> RemovingNullRows",
						"RemovingNullRows cast(output(",
						"          DepartmentCode as string,",
						"          CategoryCode as string,",
						"          CategoryName as string,",
						"          SeriesName as string,",
						"          BrandCode as string,",
						"          BrandName as string,",
						"          {MinDaysTo Ship} as integer,",
						"          MaxDaysToShip as integer,",
						"          MinPrice as integer,",
						"          MaxPrice as integer",
						"     ),",
						"     errors: true) ~> ChangingTheDataTypes",
						"RemovingNullRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'main_prod',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedMainProdData",
						"ChangingTheDataTypes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'sub_prod',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedSubProdData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Sub Prod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadingSubProdDataToBlob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Department Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Department Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Category Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Category Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Category Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Category Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Series Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Series Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Series Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Series Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Brand Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Brand Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Brand Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Brand Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Min Days To Ship",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Min Days To Ship",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Max Days To Ship",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Max Days To Ship",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Min Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Min Price",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Max Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Max Price",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ScrappedData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_BlobToDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ass2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ScrappedData')]",
				"[concat(variables('factoryId'), '/datasets/DS_BlobToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Stage To Prep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MovingProductTablesToPrepLayer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_ScrappedDataCleaning",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MainProdData": {},
									"SubProdData": {},
									"CleanedMainProdData": {},
									"CleanedSubProdData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ass2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_ScrappedDataCleaning')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactDimProducts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Ass2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "MainProd"
						},
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "subProd"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "ProdDim",
							"description": "Product Dimension Table"
						},
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "BrandDim",
							"description": "Brand Dimension Table"
						},
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "ShippingDim"
						},
						{
							"linkedService": {
								"referenceName": "LS_BlobToDb",
								"type": "LinkedServiceReference"
							},
							"name": "PriceDim"
						}
					],
					"transformations": [
						{
							"name": "JoiningDeptAndSeriesData"
						},
						{
							"name": "SelectTheRequiredFields"
						},
						{
							"name": "GettingBrandDetails",
							"description": "Joining two tables to get brand details"
						},
						{
							"name": "SelectingBrand",
							"description": "selecting the columns that specifies brand"
						},
						{
							"name": "AvgShippingDays",
							"description": "Derive Column Avg ShippingDays"
						},
						{
							"name": "RequiredColumns",
							"description": "selecting the required columns"
						},
						{
							"name": "GroupByPrice",
							"description": "Category with maximum price"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CategoryCode as string,",
						"          CategoryName as string,",
						"          Components as string,",
						"          SeriesName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'main_prod',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> MainProd",
						"source(output(",
						"          DepartmentCode as string,",
						"          CategoryCode as string,",
						"          CategoryName as string,",
						"          SeriesName as string,",
						"          BrandCode as string,",
						"          BrandName as string,",
						"          {MinDaysTo Ship} as integer,",
						"          MaxDaysToShip as integer,",
						"          MinPrice as integer,",
						"          MaxPrice as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'sub_prod',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> subProd",
						"MainProd, subProd join(MainProd@CategoryCode == subProd@CategoryCode,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningDeptAndSeriesData",
						"JoiningDeptAndSeriesData select(mapColumn(",
						"          CategoryCode = MainProd@CategoryCode,",
						"          CategoryName = MainProd@CategoryName,",
						"          DepartmentCode,",
						"          SeriesName = subProd@SeriesName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTheRequiredFields",
						"MainProd, subProd join(MainProd@CategoryCode == subProd@CategoryCode,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GettingBrandDetails",
						"GettingBrandDetails select(mapColumn(",
						"          CategoryName = MainProd@CategoryName,",
						"          SeriesName = subProd@SeriesName,",
						"          BrandCode,",
						"          BrandName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingBrand",
						"subProd derive(shippingdays = toInteger((MaxDaysToShip+{MinDaysTo Ship})/2)) ~> AvgShippingDays",
						"AvgShippingDays select(mapColumn(",
						"          CategoryCode,",
						"          CategoryName,",
						"          SeriesName,",
						"          Averageshippingdays = shippingdays",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredColumns",
						"subProd aggregate(groupBy(CategoryName),",
						"     MaxPrice = max(MaxPrice)) ~> GroupByPrice",
						"SelectTheRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'reporting',",
						"     tableName: 'ProdDim',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ProdDim",
						"SelectingBrand sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'reporting',",
						"     tableName: 'BrandDim',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> BrandDim",
						"RequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'reporting',",
						"     tableName: 'ShippingDim',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ShippingDim",
						"GroupByPrice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'reporting',",
						"     tableName: 'PriceDim',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> PriceDim"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobToDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Prep To Report')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Reporting",
						"description": "Moving Prod data To Reporting",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactDimProducts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MainProd": {},
									"subProd": {},
									"ProdDim": {},
									"BrandDim": {},
									"ShippingDim": {},
									"PriceDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ass2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactDimProducts')]"
			]
		}
	]
}